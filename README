# üé® PsyDesign AI ‚Äî AI-Powered Brand Identity Generator (Demo Version)

<p align="center">
<img src="static/AIONEX.jpg" alt="PsyDesign AI Logo" width="160"/>
</p>

<p align="center">
<em>
An intelligent design partner that translates a simple idea into a complete, psychology-driven brand identity. PsyDesign AI combines the power of brand strategy with generative AI to craft everything from a brand's core personality to its visual identity in seconds.
</em>
</p>

<p align="center">
<a href="#-key-features">Features</a> ‚Ä¢
<a href="#-technology-stack">Technology Stack</a> ‚Ä¢
<a href="#-architecture--data-flow">Architecture</a> ‚Ä¢
<a href="#-project-setup-guide">Setup Guide</a> ‚Ä¢
<a href="#-license">License</a>
</p>

---

![PsyDesign AI Demo GIF](placeholder_for_a_gif.gif)

<p align="center">
From a single sentence, PsyDesign AI generates a comprehensive brand report, a unique logo with DALL-E 3, and an interactive brand persona powered by GPT-4o. This project demonstrates an end-to-end solution for automated brand creation, built on a high-performance FastAPI backend and a dynamic, responsive frontend.
</p>

---

## üöÄ Key Features

PsyDesign AI provides a complete, automated branding pipeline with the following features:

### üß† AI-Powered Brand Strategy Report

The platform leverages **GPT-4o** to generate a comprehensive **Brand Psychology Report** from a single user prompt. This report includes:

* **Brand Personality:** Defines the brand's archetype (e.g., The Hero, The Sage), tone of voice, and core values.
* **Visual Identity:** Suggests a live font pairing from Google Fonts, ready for web use.
* **Creative Assets:** Proposes multiple unique brand names and memorable slogans.
* **Narrative:** Crafts a compelling brand story and a ready-to-use social media bio.
* **Targeting:** Creates a detailed target audience persona with interests, demographics, and pain points.
* **Marketing Idea:** An initial, creative marketing campaign concept to kickstart strategy.

---

### ‚ú® Instant Logo Generation with DALL-E 3

* **Contextual Visuals:** The system uses the `logo_concept_description` from the GPT-4o report to generate a highly relevant and detailed prompt for **DALL-E 3**.
* **High-Quality Output:** Generates HD quality (1024x1024) logos that are minimalist, iconic, and versatile.
* **Integrated Download:** Users can download the generated logo directly from the UI, facilitated by a secure image proxy endpoint.

---

### üí¨ Interactive Brand Persona

* **Chat with Your Brand:** After generation, users can interact with a GPT-4o powered AI persona that fully embodies the new brand's tone and personality.
* **Context-Aware & Safe:** The persona is instructed to only answer questions related to the generated brand identity and politely decline any off-topic queries.
* **Text-to-Speech:** Users can listen to the brand persona's responses, powered by OpenAI's **TTS-1-HD** model for high-fidelity audio.

---

### üåê Robust & Scalable Platform

* **Multi-Language Support:** The entire interface and all AI-generated content can be produced in **English, Spanish, French, Arabic, Chinese, and Hindi**.
* **Persistent History:** All generated brand identities, including their reports and logos, are saved to a database via **SQLAlchemy ORM** and can be revisited, compared, or deleted.
* **Modern & Responsive UI:** A clean, intuitive interface built with a mobile-first approach ensures a seamless experience on any device.

---

## üõ† Technology Stack

This project is built with a modern, high-performance Python stack, emphasizing scalability, type safety, and best practices in API development.

| Area            | Technology              | Purpose                                                                                                                    |
| :-------------- | :---------------------- | :------------------------------------------------------------------------------------------------------------------------- |
| **Backend**     | üêç **Python 3.10+**     | Core application logic and asynchronous request handling.                                                                  |
|                 | üöÄ **FastAPI**          | A high-performance web framework for building robust, type-safe APIs with automatic OpenAPI documentation.                 |
|                 | üêò **SQLAlchemy**       | Provides a powerful Object-Relational Mapper (ORM) for elegant database interactions.                                      |
|                 | üÖøÔ∏è **Pydantic**        | Enforces strict data validation for all API requests and responses.                                                        |
|                 | üåÄ **Uvicorn**          | A lightning-fast ASGI server for running the FastAPI application.                                                          |
| **AI Services** | üß† **OpenAI GPT-4o**    | The core model for generating the Brand Psychology Report and powering the chat persona.                                   |
|                 | üé® **OpenAI DALL-E 3**  | The model used for generating high-quality, context-aware logos.                                                           |
|                 | üó£Ô∏è **OpenAI TTS-1-HD** | Generates high-fidelity, natural-sounding audio for the persona's responses.                                               |
| **Frontend**    | ‚ú® **JavaScript (ES6+)** | Handles all client-side logic, dynamic rendering, and asynchronous API communication.                                      |
|                 | üé® **HTML5 & CSS3**     | Structures the application and provides a modern, responsive, and animated design.                                         |
| **Database**    | üóÑ **SQLite**           | A self-contained, serverless database for storing brand generation history. Easily swappable for PostgreSQL in production. |

---

## ‚öôÔ∏è Architecture & Data Flow

The application follows a clean, decoupled architecture:

1. **User Input:** A user submits a brand description via the frontend.
2. **API Request & Validation:** The request hits a FastAPI endpoint. **Pydantic** automatically validates the incoming data for correctness.
3. **GPT-4o Analysis:** The backend constructs a detailed, structured JSON prompt and sends it to the **GPT-4o** API. This generates the core Brand Psychology Report.
4. **DALL-E 3 Logo Generation:** The `logo_concept_description` from the GPT-4o response is used to create a new, highly specific prompt for the **DALL-E 3** API, which returns a unique logo URL.
5. **Database Persistence:** The complete brand report (JSON) and the logo URL are saved to the SQLite database as a new history item using **SQLAlchemy**.
6. **Response to Client:** The backend sends the complete brand data (report and logo URL) back to the frontend.
7. **Dynamic Rendering:** The frontend JavaScript parses the JSON and dynamically builds the entire results page, including the report, logo, font previews, and the interactive chat window.

---

## üß© Demo Version Notice

This repository represents a **demo version** of PsyDesign AI.

* All OpenAI API calls are **replaced with mock data** for security and demonstration purposes.
* The production API key and internal optimization scripts are **intentionally removed**.
* All API endpoints and integration points are ready for production activation once an API key is added.
* The **full source code and IP rights** are available under a separate **purchase agreement**.

For full access or business inquiries:
üìß **[artinghorbanian4728528@gmail.com](mailto:artinghorbanian4728528@gmail.com)**

---

## üèÅ Project Setup Guide

Follow these steps to run the demo locally.

### 1. Prerequisites

* **Python 3.10** or newer
* **Git**

### 2. Clone the Repository

```bash
git clone https://github.com/ArtinGhorbanian/PsyDesign-AI-DEMO.git
cd PsyDesign-AI-DEMO
```

### 3. Create a Virtual Environment

```bash
python -m venv venv
venv\Scripts\activate   # on Windows
# or
source venv/bin/activate  # on macOS/Linux
```

### 4. Install Dependencies

```bash
pip install -r requirements.txt
```

### 5. Run the Application

```bash
uvicorn app:app --reload
```

The demo will be available at **[http://127.0.0.1:8000](http://127.0.0.1:8000)**

> **Note:** This version runs without an API key and uses mock responses for demonstration.

---

## ¬©Ô∏è License

**Copyright (c) 2025 Artin Ghorbanian ‚Äî All Rights Reserved.**

This project and its source code are proprietary and confidential.
Unauthorized copying, distribution, or use of this software, via any medium, is strictly prohibited.
